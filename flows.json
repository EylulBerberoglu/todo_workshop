[
    {
        "id": "c9eedc0daf37ced6",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "cc4cb1445fae9b93",
        "type": "template",
        "z": "c9eedc0daf37ced6",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css\" rel=\"stylesheet\">\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Yapılacaklar Listesi</title>\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"/font/fonts/bootstrap-icons.min.css\">\n</head>\n\n<body>\n    <div class=\"container mt-5\">\n        <div class=\"row\">\n            <div class=\"col-md-8 offset-md-2\">\n                {{#error}}\n                <div class=\"alert alert-danger\">\n                        <h4>{{message}}</h4>\n                    </div>\n                    {{/error}}\n                    <form action=\"/opt/add\" method=\"POST\">\n                    <div class=\"input-group input-group-lg\">\n                        <input required type=\"text\" name=\"name\" class=\"form-control {{#error}}border-danger{{/error}}\" placeholder=\"Enter a job\">\n                        <button class=\"btn btn-outline-secondary\" type=\"reset\">Delete</button>\n                        <button class=\"btn btn-primary\" type=\"submit\">Add</button>\n                    </div>\n                </form>\n                <div class=\"card mt-2 overflow-hidden\">\n                    <div class=\"card-body p-0\">\n                         <div class=\"table-responsive\">\n                        <table class=\"table table-hover m-0\">\n                        <thead class=\"table-dark\">\n                            <tr>\n                                <th colspan=\"2\">Job</th>\n                                <th></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {{#payload}}\n                            <tr>\n                                <td>\n                                    {{#done}}\n                                    <h4 class=\"text-muted\"><del>{{name}}</del></h4>\n                                    {{/done}}\n                                    {{^done}}\n                                    <h4>{{name}}</h4>\n                                    {{/done}}\n                                    <div class=\"badge bg-secondary\"><small><i class=\"bi bi-calendar\"></i> {{date}} {{time}}</small></div>\n                                </td>\n                                <td align=\"right\">\n                                    <div class=\"btn-group text-right\">\n                                        <form method=\"POST\">\n                                            <input type=\"hidden\" name=\"id\" value=\"{{id}}\">\n                                        {{#done}}\n                                            <button data-bs-toggle=\"tooltip\" data-bs-title=\"Open\" type=\"submit\" formaction=\"/opt/open\" class=\"btn btn-warning\"><i class=\"bi bi-arrow-clockwise\"></i></button>\n                                        {{/done}}\n                                        {{^done}}\n                                            <a data-bs-toggle=\"tooltip\" data-bs-title=\"Edit\" href=\"/edit/{{id}}\" class=\"btn btn-info\"><i class=\"bi bi-pencil-fill\"></i></a>\n                                            <button data-bs-toggle=\"tooltip\" data-bs-title=\"Remind\" type=\"submit\" class=\"btn btn-success\"><i class=\"bi bi-alarm-fill\"></i></button>\n                                            <button data-bs-toggle=\"tooltip\" data-bs-title=\"Complete\" type=\"submit\" formaction=\"/opt/complete\" class=\"btn btn-danger\"><i class=\"bi bi-check-circle-fill\"></i></button>\n                                        {{/done}}\n                                            <button data-bs-toggle=\"tooltip\" data-bs-title=\"Trash\" type=\"submit\" formaction=\"/opt/trash\" class=\"btn btn-warning\"><i class=\"bi bi-trash3-fill\"></i></button>\n                                        </form>\n                                    </div>\n                                </td>\n                                </tr>\n                                {{/payload}}\n                                {{^payload}}\n                                <tr>\n                                    <td colspan=\"2\" class=\"text-muted text-center\">There is no job yet... </td>    \n                                </tr>\n                                {{/payload}}\n                            </tbody>\n                        </table>\n                    </div>\n                 </div>\n            </div>\n         </div>\n        <script src=\"/js/bootstrap.bundle.min.js\"></script>\n        <script>\n        const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]')\n        const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))\n        </script>\n        \n</body>\n\n</html>",
        "output": "str",
        "x": 420,
        "y": 240,
        "wires": [
            [
                "debeb2be46a14671",
                "d8f0610484e8bbd4"
            ]
        ]
    },
    {
        "id": "3bf21f180c1539a1",
        "type": "http in",
        "z": "c9eedc0daf37ced6",
        "name": "",
        "url": "/",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 50,
        "y": 240,
        "wires": [
            [
                "b49469a45515b9ca"
            ]
        ]
    },
    {
        "id": "debeb2be46a14671",
        "type": "http response",
        "z": "c9eedc0daf37ced6",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 590,
        "y": 240,
        "wires": []
    },
    {
        "id": "b6c76daa49d7a96c",
        "type": "function",
        "z": "c9eedc0daf37ced6",
        "name": "DB",
        "func": "// Flush DB\n\nglobal.set(\"DB\" , {\n    todo: []\n})",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nconst DB = global.get(\"DB\") || {\n    todo: []\n}\n\nglobal.set(\"DB\", DB)",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 120,
        "wires": []
    },
    {
        "id": "6fcf2c7719ccf7ae",
        "type": "inject",
        "z": "c9eedc0daf37ced6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 120,
        "wires": [
            [
                "b6c76daa49d7a96c"
            ]
        ]
    },
    {
        "id": "b49469a45515b9ca",
        "type": "function",
        "z": "c9eedc0daf37ced6",
        "name": "db.todo.find()",
        "func": "const DB = global.get(\"DB\")\n\nmsg.payload = DB.todo\n\nreturn msg; \n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 240,
        "wires": [
            [
                "cc4cb1445fae9b93",
                "0816f117f36d80c0"
            ]
        ]
    },
    {
        "id": "a67dd34bbc132093",
        "type": "link in",
        "z": "c9eedc0daf37ced6",
        "name": "link in 1",
        "links": [
            "2313a682ebf4707e",
            "3e0722ad0c2dcd56",
            "c48607e362785b91"
        ],
        "x": 75,
        "y": 180,
        "wires": [
            [
                "b49469a45515b9ca"
            ]
        ]
    },
    {
        "id": "04e7529495feebec",
        "type": "http in",
        "z": "c9eedc0daf37ced6",
        "name": "",
        "url": "/opt/:type",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 80,
        "y": 480,
        "wires": [
            [
                "17affe84b6ce1b41",
                "e6b80981981ec57c"
            ]
        ]
    },
    {
        "id": "c0f587b7033137d5",
        "type": "http response",
        "z": "c9eedc0daf37ced6",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/"
        },
        "x": 680,
        "y": 460,
        "wires": []
    },
    {
        "id": "10fc6359c23fd0b5",
        "type": "function",
        "z": "c9eedc0daf37ced6",
        "name": "db.todo.opt()",
        "func": " const DB = global.get(\"DB\")\n\nlet todo = DB.todo\n\nconst date = new Date()\nconst now = date.getTime()\n\nif(msg.req.params.type === \"add\") {\n    todo.push({\n        id: now,\n        name: msg.payload.name,\n        done: false,\n        stamp:{\n            createdAt: now,\n            ip: msg.req.ip,\n            username: \"\",\n            email: \"\"\n        },\n        date: date.toLocaleDateString(\"TR\"),\n        time: date.toLocaleTimeString(\"TR\")\n    })\n\n} \n\nelse {\n    const index = todo.findIndex(x => x.id == msg.payload.id)\n   \n    if (!~index) {\n        msg.error = {\n            message: \"İd ile eşleşen bir kayıt bulunamadı.\"\n        }\n        return [null, msg]\n    } \n\n    if (msg.req.params.type === \"update\" && todo[index].done) {\n        msg.error = {\n            message: \"Tamamlanan işler güncellenemez!\"\n        }\n        return [null, msg]\n    } \n\nif (msg.req.params.type === \"trash\") {\n    todo.splice(index, 1)\n    }\n    \nelse if (msg.req.params.type === \"schedule\"){\n    todo[index].schedule = msg.payload\n}\n\nelse {\n        switch (msg.req.params.type) {\n            case \"complete\":\n                todo[index].done = true\n                break;\n            case \"open\":\n                todo[index].done = false\n                break;\n            case \"update\":\n                todo[index].name = msg.payload.name\n                break;    \n        }\n    todo[index].stamp = {\n        createdAt: now,\n        ip: msg.req.ip,\n        username: \"\",\n        email: \"\"\n    },\n    todo[index].date = date.toLocaleDateString(\"TR\")\n    todo[index].time = date.toLocaleTimeString(\"TR\")\n    }\n}\n\n\n\n\nDB.todo = todo\n\nglobal.set(\"DB\", DB)\n\nreturn msg;",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 480,
        "wires": [
            [
                "c0f587b7033137d5"
            ],
            [
                "2313a682ebf4707e"
            ],
            [
                "d7b6c40cab76e104"
            ]
        ],
        "outputLabels": [
            "Succ",
            "Err",
            ""
        ]
    },
    {
        "id": "17affe84b6ce1b41",
        "type": "function",
        "z": "c9eedc0daf37ced6",
        "name": "validation",
        "func": "const typeLookup = {\n    trash: {\n        text: \"Silmek\",\n        requireArgs: [\"id\"]\n    },\n    complete: {\n        text: \"Tamamlamak\",\n        requireArgs: [\"id\"]\n    },\n    open: {\n        text: \"Açmak\",\n        requireArgs: [\"id\"]\n    },\n    add: {\n        text: \"Eklemek\",\n        requireArgs: [\"name\"]\n    },\n    update: {\n        text: \"Güncellemek\",\n        requireArgs: [\"id\", \"name\"]\n    },\n    schedule: {\n        text: \"Hatırlatıcı Kurmak\",\n        requireArgs: [\"id\"]\n    }\n}\n\nif (!Object.keys(typeLookup).includes(msg.req.params.type)) {\n    msg.error = {\n        message: '${msg.req.params.type} Invalid parameter value!'\n    }\n    return [null, msg]\n}\n\n\nif (!typeLookup[msg.req.params.type].requireArgs.every(arg => msg.payload[arg])) {\n    msg.error = {\n        message: '${typeLookup[msg.req.params.type].text} It has to be ID info for the job ${typeLookup[msg.req.params.type].requireArg} that you want to select!'\n    }\n    return [null, msg]\n}\n\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 480,
        "wires": [
            [
                "10fc6359c23fd0b5"
            ],
            [
                "3e0722ad0c2dcd56",
                "fd1bb1a1984c2d6b"
            ]
        ],
        "outputLabels": [
            "Valid",
            "Invalid"
        ]
    },
    {
        "id": "2313a682ebf4707e",
        "type": "link out",
        "z": "c9eedc0daf37ced6",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "a67dd34bbc132093"
        ],
        "x": 625,
        "y": 500,
        "wires": []
    },
    {
        "id": "3e0722ad0c2dcd56",
        "type": "link out",
        "z": "c9eedc0daf37ced6",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "a67dd34bbc132093"
        ],
        "x": 415,
        "y": 540,
        "wires": []
    },
    {
        "id": "cffd97495d86633b",
        "type": "http in",
        "z": "c9eedc0daf37ced6",
        "name": "",
        "url": "/schedule/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 80,
        "y": 340,
        "wires": [
            [
                "757f6dd3d297426e"
            ]
        ]
    },
    {
        "id": "757f6dd3d297426e",
        "type": "function",
        "z": "c9eedc0daf37ced6",
        "name": "db.todo.findOne()",
        "func": "const DB = global.get(\"DB\")\n\nmsg.payload = DB.todo.find(x => x.id == msg.req.params.id)\n\nif(!msg.payload) {\n    msg.error = {\n            message: \"İd ile eşleşen bir kayıt bulunamadı.\"\n        }\n        return [null, msg]\n}\n\nif (msg.payload.done) {\n    msg.error = {\n        message: \"Tamamlanan işler için hatırlatma kurulamaz!\"\n    }\n    return [null, msg]\n}\n\nreturn msg; ",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 340,
        "wires": [
            [
                "4783f787e0604c18",
                "b6fc50063734bd75"
            ],
            [
                "c48607e362785b91"
            ]
        ],
        "outputLabels": [
            "Succ",
            "Err"
        ]
    },
    {
        "id": "4783f787e0604c18",
        "type": "template",
        "z": "c9eedc0daf37ced6",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css\" rel=\"stylesheet\">\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Yapılacaklar Listesi</title>\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"/font/fonts/bootstrap-icons.min.css\">\n</head>\n\n<body>\n    <div class=\"container mt-5\">\n        <div class=\"row\">\n            <div class=\"col-md-8 offset-md-2\">\n                {{#error}}\n                <div class=\"alert alert-danger\">\n                        <h4>{{message}}</h4>\n                    </div>\n                    {{/error}}\n                    <form action=\"/opt/update\" method=\"POST\">\n                    <input type=\"hidden\" name=\"id\" value=\"{{payload.id}}\">\n                    <div class=\"mb-3\">\n                        <input required type=\"text\" name=\"name\" value=\"{{payload.name}}\" class=\"form-control form-control-lg {{#error}}border-danger{{/error}} {{^error}}border-info{{/error}}\" placeholder=\"Enter a job\">\n                    </div>\n                    <div class=\"mb-3 float-end\">\n                        <a class=\"btn btn-outline-warning\" href=\"/\">Cancel</a>\n                        <button class=\"btn btn-outline-secondary\" type=\"reset\">Delete</button>\n                        <button class=\"btn btn-success px-5\" type=\"submit\">Update</button>\n                </form>\n         </div>\n        <script src=\"/js/bootstrap.bundle.min.js\"></script>\n        <script>\n        const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]')\n        const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))\n        </script>\n        \n</body>\n\n</html> ",
        "output": "str",
        "x": 520,
        "y": 340,
        "wires": [
            [
                "514f4b9c5ab1201f",
                "bac1b5a6539de28e"
            ]
        ]
    },
    {
        "id": "c48607e362785b91",
        "type": "link out",
        "z": "c9eedc0daf37ced6",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "a67dd34bbc132093"
        ],
        "x": 485,
        "y": 380,
        "wires": []
    },
    {
        "id": "514f4b9c5ab1201f",
        "type": "http response",
        "z": "c9eedc0daf37ced6",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 690,
        "y": 340,
        "wires": []
    },
    {
        "id": "318cd792993dc45d",
        "type": "crontinject",
        "z": "c9eedc0daf37ced6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "crontiMethod": "onIntervalTime",
        "crontiArgs": "[\"2025-06-27T10:10\",\"2025-06-27T10:10\",\"1\",\"\"]",
        "inputs": 0,
        "hasButton": true,
        "x": 690,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "0816f117f36d80c0",
        "type": "debug",
        "z": "c9eedc0daf37ced6",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 180,
        "wires": []
    },
    {
        "id": "e6b80981981ec57c",
        "type": "debug",
        "z": "c9eedc0daf37ced6",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 560,
        "wires": []
    },
    {
        "id": "d7b6c40cab76e104",
        "type": "debug",
        "z": "c9eedc0daf37ced6",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 600,
        "wires": []
    },
    {
        "id": "fd1bb1a1984c2d6b",
        "type": "debug",
        "z": "c9eedc0daf37ced6",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 620,
        "wires": []
    },
    {
        "id": "b6fc50063734bd75",
        "type": "debug",
        "z": "c9eedc0daf37ced6",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 400,
        "wires": []
    },
    {
        "id": "bac1b5a6539de28e",
        "type": "debug",
        "z": "c9eedc0daf37ced6",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 300,
        "wires": []
    },
    {
        "id": "d8f0610484e8bbd4",
        "type": "debug",
        "z": "c9eedc0daf37ced6",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 200,
        "wires": []
    }
]